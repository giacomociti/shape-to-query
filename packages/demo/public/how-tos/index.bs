<pre class='metadata'>
Title: @hydrofoil/shape-to-query How-Tos
Shortname: s2q-how-tos
Abstract: Guides for efficiently using SHACL-AF with the @hydrofoil/shape-to-query library
Editor: Tomasz Pluskiewicz
Status: LD
Markup Shorthands: markdown yes
Repository: https://github.com/hypermedia-app/shape-to-query
URL: https://shape-to-query.hypermedia.app/how-tos/
Block Elements: s2q-snippet
</pre>

<pre class=include>
path: ../include/shared.bs
</pre>

# How-To Guides # {#top}

## How to implement a custom Node Expressions ## {#node-expression-custom}

Note: before proceeding you may want to read [[s2q-concepts#dsl]]

### How to implement a specialized SPARQL node expression ### {#node-expression-custom-sparql}

Issue: implementing hydra member assertion query 

### How to implement a compound node expression ### {#node-expressions-compound}

Issue: implementing a limit/offset/order shorthand

## How to register a custom function ## {#custom-function}

In this how-to we will add support for a `palindrome` function as described in [this tutorial](https://rdf4j.org/documentation/tutorials/custom-sparql-functions/). Assuming that you've already added support of such a function
to your SPARQL engine, you should be able to perform a query such as that shown in the mentioned tutorial:

```sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX cfn: <http://example.org/custom-function/>
SELECT ?x ?label
WHERE {
   ?x rdfs:label ?label .
   FILTER(cfn:palindrome(str(?label)))
}
```

In order for shape-to-query to recognize you custom function, the necessary metadata needs to be added to the SPARQL vocabulary.
This can be easily done programmatically, at the minimum by adding an `rdf:type` assertion about the function itself.

<pre class="include-code" slot="shape">
path: example/palindrome/index.ts
highlight: js
</pre>

Alternatively, you may choose to load the additional metadata by parsing a turtle string or loading an RDF file, or
fetching it the web. Use the following code to add all the parsed triples to the vocabulary dataset:

```ts
import type { DatasetCore } from '@rdfjs/types'
import vocabulary from '@hydrofoil/shape-to-query/vocabulary.js'
import addAll from 'rdf-dataset-ext/addAll.js'

let customFunctions: DatasetCore = await loadAndParseFunctions()

addAll(vocabulary.dataset, customFunctions)
```

NOTE: Read [[s2q-concepts#function-metadata]] to learn more about the recognised properties of SHACL functions.

With function metadata in place, you can now use the custom function in any node expression:

<div class="example">
  Populate a property which will indicate that the name property of a resource is a palindrome

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/palindrome/shape.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/palindrome/shape.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Issue(130): simplify the example when `sh:expressions` is implemented to use the result of the palindrome function call as a constraint


## Optimising joins in Stardog ## {#stardog-joins}

Deep and broad structures described with `sh:node` tend to degrade join performance in some versions of Stardog which
fail to optimise the joins necessary to combine the results coming from nested base graph patterns. 

This can be remedied by introducing `group.joins` [query hint](https://docs.stardog.com/operating-stardog/database-administration/managing-query-performance#groupjoins)
to the combined properties of a `sh:node` constraint. To do that, it will be necessary to provide a customized instance
of `PropertyShape` class which builds the property constraints. The following example shows how to do that:

<pre class="include-code">
path: example/joins.ts
highlight: typescript
</pre>
