<pre class='metadata'>
Title: shape-to-query
Shortname: s2q
Editor: Tomasz Pluskiewicz
Abstract: Library for generating SPARQL from SHACL Shapes
Status: LD
Markup Shorthands: markdown yes
Block Elements: s2q-snippet
Repository: https://github.com/hypermedia-app/shape-to-query
URL: https://shape-to-query.hypermedia.app/docs
</pre>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.1.0/dist/themes/light.css" />
<script type="module" src="./lib/s2q-snippet.js" async defer>
</script>

# Introduction # {#introduction}

The library translates SHACL Node Shapes to [[!sparql11-overview|SPARQL]] Queries in the form of [[sparql11-query#construct|CONSTRUCT]] and [[sparql11-update#deleteWhere|DELETE]].

# Getting started # {#gettings-started}

## Installation ## {#installation}

The library is written in TypeScript and distributed as an NPM package:

```shell
npm i --save @hydrofoil/shape-to-query
```

## Basic usage ## {#basic-usage}

```ts
import type { GraphPointer } from 'clownface'
import { constructQuery } from '@hydrofoil/shape-to-query'

let shape: GraphPointer

const queryString = constructQuery(shape).build()
```

## About examples below ## {#about-examples}

All the examples shown in this documentation are based on a toy dataset [tbbt-ld](https://npm.im/tbbt-ld) which contains resources
describing characters from the TV series The Big Bang Theory. To look nicer, the `localhost` URLs have been replaced with 
fictitious a `tbbt.tv` domain.

# SHACL Constraints # {#shacl-constraints}

Issue(42): Issue epic on GitHub

## Targets ## {#target}

### Node targets (`sh:targetNode`) ### {#target-node}

Note: SHACL spec: [[shacl#targetNode]]

A single `sh:targetNode` becomes the root subject, directly in the generated triple patterns

<div class="example">
  Single target node

  <s2q-snippet>
    <pre class="include-code">
    path: example/targetNode.ttl
    highlight: turtle
    </pre>
    <pre class="include-code">
    path: example/targetNode.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

When there are multiple target nodes, a variable is used for the root focus node and the target nodes are provided as inline data using [[sparql11-query#inline-data|VALUES]] claues.

<div class="example">
  Multiple target nodes

  <s2q-snippet>
    <pre class="include-code">
    path: example/targetNode-multi.ttl
    highlight: turtle
    </pre>
    <pre class="include-code">
    path: example/targetNode-multi.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

## Core Constraint Components ## {#shacl-core-components}

### Logical Constraint Components ### {#shacl-logical-constraints}

The elements of a `sh:or` list are shapes and thus, they can be used both to define alternative paths to construct in the constructed graph, 
or add filters to filter out according to the shapes' constraints.

#### sh:and #### {#shacl-and}

Note: SHACL spec: [[shacl#AndConstraintComponent]]

Combines all paths and constraints from the list of shapes.

<div class="example">
  Filter characters who know Sheldon Cooper and are a microbiologist 

  <s2q-snippet>
    <pre class="include-code">
    path: example/and.ttl
    highlight: turtle
    </pre>
    <pre class="include-code">
    path: example/and.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

#### sh:or #### {#shacl-or}

Note: SHACL spec: [[shacl#OrConstraintComponent]]

<div class="example">
  Get `schema:givenName` and `schema:familyName` but only of those resources which have either `schema:parent` or `schema:children` properties

  <s2q-snippet>
    <pre class="include-code">
    path: example/or.ttl
    highlight: turtle
    </pre>
    <pre class="include-code">
    path: example/or.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Issue: Add example of `sh:or` used in `sh:property` when more useful constraints are implemented 

### Other Constraint Components ### {#shacl-other-components}

#### sh:hasValue #### {#shacl-has-value}

Note: SHACL spec: [[shacl#HasValueConstraintComponent]]

Filters nodes whose property has the exact set of objects

<div class="example">
  Get `schema:givenName` and `schema:familyName` but only of those resources who know both Sheldon Cooper and Stuart Bloom

  <s2q-snippet>
    <pre class="include-code">
    path: example/has-value.ttl
    highlight: turtle
    </pre>
    <pre class="include-code">
    path: example/has-value.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Advisement: `sh:hasValue` is not currently supported as property of the root node shape and will be ignored in such case

#### sh:in #### {#shacl-in}

Note: SHACL spec: [[shacl#InConstraintComponent]]

Similar to [[#shacl-has-value]] but filters focus nodes whose property has values from the given set and no others.

<div class="example">
  Get `schema:givenName` and `schema:familyName` but only of those resources who know Sheldon Cooper or Stuart Bloom

  <s2q-snippet>
    <pre class="include-code">
    path: example/in.ttl
    highlight: turtle
    </pre>
    <pre class="include-code">
    path: example/in.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Advisement: `sh:in` is not currently supported as property of the root node shape and will be ignored in such case

# SHACL Advanced Features # {#shacl-advanced}

Advisement: This section uses the currently published [[!shacl-af|SHACL Advanced Features]] spec as well as parts of the [Community Group Draft](https://w3c.github.io/shacl/shacl-af). The implementation may become outdated in time or deviate from the spec to accommodate for the specifics of generating queries.

Issue(19): Issue epic on GitHub

## Node expressions ## {#shacl-advanced-node-expressions}

The core of the support for node expressions is the new `sh:values` predicate, which allows the query generator to provide values for the predicate. Rather than following the `sh:path` to find the match the RDF terms, the node expressions are define the objects of the property. Different kinds of node expressions can be used to generate subselects or computed properties.

Note: Because the result must be a triple patterns where the node expression's output is the subject or object, only [[shacl#property-path-predicate|Predicate Path]] and [[shacl#property-path-inverse|Inverse Path]] can be used with `sh:values`.

Issue(20): Multiple objects of `sh:values` should form a `UNION`

### Focus node expression ### {#shacl-focus-node-expressions}

Note: SHACL-AF spec: [[shacl-af#node-expressions-focus]]

The object of the property at `sh:path` is the current focus node

<div class="example">
  Focus node expressions

  <s2q-snippet>

  <pre class="include-code">
  path: example/values-focus-node.ttl
  highlight: turtle
  </pre>

  <pre class="include-code">
  path: example/values-focus-node.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Issue: the example above is quite nonsensical, just shows the mechanics of `sh:this`. Would be nice to come up with something more pragmatic

### Constant term expression ### {#shacl-constant-term-expressions}

Note: SHACL-AF spec: [[shacl-af#node-expressions-constant]]

The objects of `sh:values` become directly asserted as the objects of the property.

<div class="example">
  Two properties with constant values

  <s2q-snippet>
  
  <pre class="include-code">
  path: example/values-constant.ttl
  highlight: turtle
  </pre>
  
  <pre class="include-code">
  path: example/values-constant.ttl.rq
  highlight: sparql
  </pre>
  
  </s2q-snippet>
</div>
